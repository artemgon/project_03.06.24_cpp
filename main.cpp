#include "functions.h"

int main()
{
	const int size = 10, rows = 5, cols = 5, depth = 5;
	int array_1[size] = { 7, 29, 60, 17, 96, 32, 45, 87, 64, 12 }, matrix_1[rows][cols] = { {8,5,24,45,23},{19,14,54,21,64},{27,81,54,31,90},{37,69,45,88,19}, {3,7,31,36,15}};
	float array_2[size] = { 34.62, 57.0, 36.5, 46.7, 35.4, 59.2, 7.8, 96.2, 5.0, 89.1 }, matrix_2[rows][cols] = { {1.1, 2.2, 3.3, 4.4, 5.5},{6.6 ,7.7, 8.8, 9.9, 10.1},{11.1, 12.2, 13.3, 14.4, 15.5},{16.6,17.7, 18.8, 19.9 , 20.0},{21.1, 22.2,23.3, 24.4, 25.5} };
	long array_3[size] = { 12L, 44L, 5L, 22L, 37L, 30L, 77L, 55L, 32L, 10L }, matrix_3[rows][cols] = { {12L, 44L, 5L, 22L, 37L}, { 11L, 22L, 90L, 23L, 18L,} ,{99L, 17L,14L, 67L, 48L}, {19L,21L,54L, 56L, 15L}, {12L, 44L, 5L, 22L, 37L} };
	cout << arrayMax(array_1, size);
	cout << "\n\n" << arrayMax(array_2, size);
	cout << "\n\n" << arrayMax(array_3, size);
	cout << "\n\n" << matrixMax(matrix_1, rows, cols);
	cout << "\n\n" << matrixMax(matrix_2, rows, cols);
	cout << "\n\n" << matrixMax(matrix_3, rows, cols);
	int array3d_1[depth][rows][cols] =
	{ { { 1,2,3,4,5 },
		{ 6,7,8,9,10 },
		{ 11,12,13,14,15 },
		{ 16,17,18,19,20},
		{ 21,22,23,24,25, } },
	  { { 26,27,28,29,30 },
		{ 31,32,33,34,35 },
		{ 36,37,38,39,40 },
		{41,42,43,44,45},
		{ 46,47,48,49,50 } },
	  { {51,52,53,54,55},
		{56,57,58,59,60},
		{61,62,63,64,65},
		{66,67,68,69,70},
		{71,72,73,74,75} } ,
	  { {76,77,78,79,80},
		{81,82,83,84,85},
		{86,87,88,89,90},
		{91,92,93,94,95},
		{96,97,98,99,100} } ,
	  { {101,102,103,104,105},
		{106,107,108,109,110},
		{111,112,113,114,115},
		{116,117,118,119,120},
		{121,122,123,124,125} } ,
	};
	float array3d_2[depth][rows][cols] =
	{ { { 1.1 ,2.2 ,3.3 ,4.4 ,5.5 },
	{ 6.6 ,7.7 ,8.8 ,9.9 , 11.1 },
	{ 12.1 ,13.2 ,14.3, 15.4, 16.5 },
	{ 17.6 ,18.7 ,19.8, 20.9,  22.2 },
	{ 23.1 ,24.2 ,25.3, 26.4, 27.5 } },
  { { 28.6 ,29.7 ,30.8 ,31.9 ,33.3 },
	{ 34.1 ,35.2 ,36.3 ,37.4,38.5 },
	{ 39.6 ,40.7 ,41.8 ,42.9 ,44.4 },
	{45.1 ,46.2 ,47.3 ,48.4 ,49.5},
	{ 50.6 ,51.7 ,52.8 ,53.9 ,55.5 } },
  { {56.1 ,57.2 ,58.3 ,59.4 ,60.5},
	{61.6 ,62.7 ,63.8 ,64.9 ,66.6},
	{67.1 ,68.2 ,69.3 ,70.4 ,71.5},
	{72.6 ,73.7 ,74.7999 ,75.8999 ,76.9999},
	{78.0999 ,79.1999 ,80.2999 ,81.3999 ,82.4999} } ,
  { {83.5999 ,84.6999 ,85.7999 ,86.8999 ,87.9999},
	{89.0999 ,90.1999 ,91.2999 ,92.3999 ,93.4999},
	{94.5999 ,95.6999 ,96.7999 ,97.8999 ,98.9999},
	{100.1 ,101.2 ,102.3 ,103.4 ,104.5},
	{105.6 ,106.7 ,107.8 ,108.9 ,110.1} } ,
  { {111.1 ,112.2 ,113.3 ,114.4 ,115.5},
	{116.6 ,117.7 ,118.8 ,119.9 ,121.1},
	{122.1 ,123.2 ,124.3 ,125.4 ,126.5},
	{127.6 ,128.7 ,129.8 ,130.9 ,132.2},
	{133.1 ,134.2 ,135.3 ,136.4 ,137.5} } ,
	};
	long array3d_3[depth][rows][cols] =
	{ { { 1L, 2L, 3L, 4L, 5L },
	{ 6L, 7L, 8L, 9L, 10L },
	{ 11L, 12L, 13L, 14L, 15L },
	{ 16L, 17L, 18L, 19L, 20L },
	{ 21L, 22L, 23L, 24L, 25L } },
  { { 26L, 27L, 28L, 29L, 30L, },
	{ 31L, 32L, 33L, 34L, 35L },
	{ 36L, 37L, 38L, 39L, 40L },
	{ 41L, 42L, 43L, 44L, 45L},
	{ 46L, 47L, 48L, 49L, 50L} },
  { {51L, 52L, 53L, 54L, 55L},
	{56L, 57L, 58L, 59L, 60L},
	{61L, 62L, 63L, 64L, 65L},
	{66L, 67L, 68L, 69L, 70L},
	{71L, 72L, 73L, 74L, 75L} } ,
  { {76L, 77L, 78L, 79L, 80L},
	{81L, 82L, 83L, 84L, 85L},
	{86L, 87L, 88L, 89L, 90L},
	{91L, 92L, 93L, 94L, 95L},
	{96L, 97L, 98L, 99L, 100L} } ,
  { {101L, 102L, 103L, 104L, 105L},
	{106L, 107L, 108L, 109L, 110L},
	{111L, 112L, 113L, 114L, 115L},
	{116L, 117L, 118L, 119L, 120L},
	{121L, 122L, 123L, 124L, 125L} } ,
	};
	cout << "\n" << threeDimArrayMax(array3d_1, rows, cols, depth);
	cout << "\n" << threeDimArrayMax(array3d_2, rows, cols, depth);
	cout << "\n" << threeDimArrayMax(array3d_3, rows, cols, depth);
	cout << "\n\n" << "Maximum between 1 and 2: " << twoMax(1, 2);
	cout << "\n\n" << "Maximum between 1 and 2: " << twoMax(1l, 2l);
	cout << "\n\n" << "Maximum between 1, 2 and 3: " << threeMax(1, 2, 3);
	cout << "\n\n" << "Maximum between 1, 2 and 3: " << threeMax(1l, 2l, 3l);
	return 0;
}
